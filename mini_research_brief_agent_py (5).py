# -*- coding: utf-8 -*-
"""Mini Research Brief Agent.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U5kLj7WNWeNURF252L8gvPTX1s6Txo7A
"""

!pip install langchain langchain-google-genai pytz pydantic

!pip install pytz

import os
api_key = input("Enter your Google API Key: ")
os.environ["GOOGLE_API_KEY"] = api_key

import os
import json
from pathlib import Path
from typing import List
from pydantic import BaseModel, ValidationError
from datetime import datetime
import pytz

from langchain.prompts import ChatPromptTemplate
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.output_parsers import PydanticOutputParser



def get_today_date() -> str:
    tz = pytz.timezone("Asia/Kolkata")
    return datetime.now(tz).strftime("%Y-%m-%d")


class ResearchBrief(BaseModel):
    title: str
    problem_statement: str
    key_questions: List[str]
    method_brief: List[str]
    deliverables: List[str]

parser = PydanticOutputParser(pydantic_object=ResearchBrief)


prompt = ChatPromptTemplate.from_messages([
    ("system", "You are an assistant that creates very short structured research briefs."),
    ("user", """Generate a research brief for the topic: {topic}.
Include today's date in the header: {today_date}.
{format_instructions}""")
])

model = ChatGoogleGenerativeAI(model="gemini-1.5-flash", temperature=0, max_retries=2)


def save_samples(topic: str, today_date: str, result: ResearchBrief):
    folder = Path("samples")
    folder.mkdir(exist_ok=True)

    safe_name = topic.lower().replace(" ", "_").replace("/", "_")
    json_path = folder / f"{safe_name}.json"
    md_path = folder / f"{safe_name}.md"


    with open(json_path, "w", encoding="utf-8") as f:
        obj = {
            "date_generated": today_date,
            "research_brief": result.model_dump()
        }
        json.dump(obj, f, indent=2)



    with open(md_path, "w", encoding="utf-8") as f:
        f.write(f"# {result.title}\n")
        f.write(f"**Date:** {today_date}\n\n")
        f.write(f"**Problem Statement:** {result.problem_statement}\n\n")
        f.write("**Key Questions:**\n")
        for q in result.key_questions:
            f.write(f"- {q}\n")
        f.write("\n**Method Brief:**\n")
        for m in result.method_brief:
            f.write(f"- {m}\n")
        f.write("\n**Deliverables:**\n")
        for d in result.deliverables:
            f.write(f"- {d}\n")

    print(f"\n Saved samples to: {json_path} and {md_path}")


def generate_brief(topic: str):
    if not topic.strip():
        raise ValueError("Error: Research topic cannot be empty.")
    if os.environ.get("GOOGLE_API_KEY") in (None, "", "YOUR_GOOGLE_API_KEY"):
        raise ValueError("Error: Please set your valid GOOGLE_API_KEY.")

    today_date = get_today_date()

    try:
        chain = prompt | model | parser
        result: ResearchBrief = chain.invoke({
            "topic": topic,
            "today_date": today_date,
            "format_instructions": parser.get_format_instructions()
        })

        print("\n JSON Output:\n")
        obj = {
            "date_generated": today_date,
            "research_brief": result.model_dump()
        }
        print(json.dumps(obj, indent=2))


        print("\n Markdown Preview:\n")
        print(f"# {result.title}")
        print(f"**Date:** {today_date}\n")
        print(f"**Problem Statement:** {result.problem_statement}\n")
        print("**Key Questions:**")
        for q in result.key_questions:
            print(f"- {q}")
        print("\n**Method Brief:**")
        for m in result.method_brief:
            print(f"- {m}")
        print("\n**Deliverables:**")
        for d in result.deliverables:
            print(f"- {d}")

        save_samples(topic, today_date, result)
        return result

    except ValidationError as ve:
        print("Validation Error:", ve)
    except Exception as e:
        print("Unexpected Error:", e)


if __name__ == "__main__":
    topic = input("Enter your research topic: ")
    generate_brief(topic)



